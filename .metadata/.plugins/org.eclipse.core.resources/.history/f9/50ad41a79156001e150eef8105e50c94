package com.indianbank.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.indianbank.entity.User;
import com.indianbank.repository.UserRepository;
import com.indianbank.service.UserService;

import jakarta.servlet.http.HttpSession;

@Controller
public class UserController {

	@Autowired
	private UserService userService;

	@Autowired
	private UserRepository userRepository;

	public UserController(UserService userService) {
		super();
		this.userService = userService;
	}

	@GetMapping("/users")
	public String allUsers(
	    @RequestParam(name = "searchKey", defaultValue = "") String searchKey,
	    @RequestParam(name = "genderFilter", defaultValue = " ") Character genderFilter,
	    @RequestParam(name = "acFilter", defaultValue = "") String acFilter,
	    Model model) {

	    if (searchKey.isEmpty() && genderFilter.equals(' ') && acFilter.isEmpty()) {
	        model.addAttribute("users", userService.allUser());
	        return "users";
	    } else {
	        List<User> users;
	        if (!searchKey.isEmpty() && genderFilter.equals(' ') && acFilter.isEmpty()) {
	            // If no gender or account type filter is selected, use only the search key.
	            users = userRepository.findByFnameContainingIgnoreCaseOrLnameContainingIgnoreCase(searchKey, searchKey);
	        } else if (acFilter.isEmpty()) {
	            // If a gender filter is selected, use both search key and gender criteria.
	            users = userRepository.findByFnameContainingIgnoreCaseOrLnameContainingIgnoreCaseAndSex(searchKey, searchKey, genderFilter);
	        } else {
	            // When gender and account type filters are both selected.
	            users = userRepository.findByFnameContainingIgnoreCaseOrLnameContainingIgnoreCaseAndAcTypeAndSex(searchKey, searchKey, acFilter, genderFilter);
	        }
	        model.addAttribute("users", users);
	        return "users";
	    }
	}


	@GetMapping("register")
	public String createUserForm(Model model) {
		System.out.println("@GetMapping(\"register\")");
		User user = new User();
		model.addAttribute("user", user);
		return "registration";
	}

	@PostMapping("/user")
	public String saveUser(@ModelAttribute("user") User user, HttpSession session) {
		Long userId = userService.saveUserId(user);
		session.setAttribute("userId", userId);
		return "redirect:/register?success";
	}

//In This using HttpSession to pass the attribute not Model because of its scope

//	@GetMapping("/index")
//	public String dashboard(Model model) {
//		System.out.println("@GetMapping(\"/index\")");
//		model.addAttribute("users", userService.allUser());
//		return "index";
//	}
	@GetMapping("/")
	public String landing() {
		return "landing";
	}
}
